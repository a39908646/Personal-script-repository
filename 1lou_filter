// ==UserScript==
// @name         BT之家搜索结果过滤器Pro
// @namespace    http://tampermonkey.net/
// @version      0.5
// @description  为BT之家搜索结果添加关键词筛选和屏蔽功能,支持面板折叠
// @author       You
// @match        *://*.1lou.me/*
// @match        *://*.btbtt*.com/*
// @match        *://*.btbtt*.me/*
// @grant        GM_getValue
// @grant        GM_setValue
// ==/UserScript==

(function() {
    'use strict';

    // 创建基础样式
    const style = document.createElement('style');
    style.textContent = `
        #filterPanel {
            position: fixed;
            top: 100px;
            right: -300px;
            width: 300px;
            background: white;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            z-index: 9999;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: right 0.3s;
        }
        #toggleFilter {
            position: absolute;
            left: -30px;
            top: 50%;
            transform: translateY(-50%);
            width: 30px;
            height: 60px;
            background: #4a90e2;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border-radius: 5px 0 0 5px;
            font-size: 20px;
        }
        .filter-section {
            margin-bottom: 15px;
        }
        .filter-section h4 {
            font-size: 14px;
            margin-bottom: 5px;
            color: #333;
        }
        .filter-textarea {
            width: 100%;
            height: 80px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
            font-size: 12px;
            resize: vertical;
        }
        .filter-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }
        .filter-button {
            padding: 5px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            background: #4a90e2;
            color: white;
            font-size: 12px;
        }
        .filter-button:hover {
            opacity: 0.9;
        }
        .filter-button.danger {
            background: #e74c3c;
        }
        .stats {
            text-align: center;
            color: #666;
            font-size: 12px;
            margin-top: 10px;
        }
        .hidden {
            display: none !important;
        }
        .filtered-item {
            opacity: 0.5;
            text-decoration: line-through;
        }
        .shortcut-tip {
            font-size: 11px;
            color: #666;
            margin-top: 5px;
            text-align: center;
        }
        .import-export {
            display: flex;
            gap: 5px;
            margin-top: 10px;
        }
        .import-export button {
            flex: 1;
            font-size: 12px;
        }
    `;
    document.head.appendChild(style);

    // 创建过滤设置面板
    function createFilterPanel() {
        const panel = document.createElement('div');
        panel.id = 'filterPanel';

        // 获取面板状态
        const isPanelVisible = GM_getValue('panelVisible', false);

        // 获取保存的关键词
        const includeKeywords = GM_getValue('includeKeywords', '2160p\n4K\nHDR\n');
        const excludeKeywords = GM_getValue('excludeKeywords', '国语配音\n合集');

        panel.innerHTML = `
            <div id="toggleFilter">◀</div>
            <div style="margin-bottom: 15px;">
                <strong style="font-size: 16px;">结果过滤器</strong>
            </div>

            <div class="filter-section">
                <h4>必须包含以下关键词</h4>
                <small style="color: #666;">每行一个关键词，支持正则表达式</small>
                <textarea id="includeKeywords" class="filter-textarea"
                    placeholder="输入必须包含的关键词...">${includeKeywords}</textarea>
            </div>

            <div class="filter-section">
                <h4>排除以下关键词</h4>
                <small style="color: #666;">每行一个关键词，支持正则表达式</small>
                <textarea id="excludeKeywords" class="filter-textarea"
                    placeholder="输入要排除的关键词...">${excludeKeywords}</textarea>
            </div>

            <div class="filter-buttons">
                <button id="saveFilters" class="filter-button">保存</button>
                <button id="applyFilters" class="filter-button">应用</button>
                <button id="resetFilters" class="filter-button danger">重置</button>
            </div>

            <div class="import-export">
                <button id="exportFilters" class="filter-button">导出配置</button>
                <button id="importFilters" class="filter-button">导入配置</button>
            </div>

            <div class="stats">
                <span>显示: <b id="showCount">0</b> 条</span>
                <span style="margin-left: 10px;">隐藏: <b id="hideCount">0</b> 条</span>
            </div>

            <div class="shortcut-tip">
                快捷键: Ctrl+Shift+F (开关面板) | Ctrl+Enter (应用过滤)
            </div>
        `;

        document.body.appendChild(panel);

        // 设置初始状态
        if(isPanelVisible) {
            panel.style.right = '0';
            panel.querySelector('#toggleFilter').innerHTML = '▶';
        }

        // 添加事件监听器
        addEventListeners(panel);
    }

    // 新增事件监听器函数
    function addEventListeners(panel) {
        // 面板切换
        let isPanelVisible = GM_getValue('panelVisible', false);
        const toggleBtn = panel.querySelector('#toggleFilter');

        toggleBtn.addEventListener('click', () => {
            togglePanel();
        });

        // 保存按钮
        document.getElementById('saveFilters').addEventListener('click', saveFilters);

        // 应用按钮
        document.getElementById('applyFilters').addEventListener('click', applyFilters);

        // 重置按钮
        document.getElementById('resetFilters').addEventListener('click', resetFilters);

        // 导入导出按钮
        document.getElementById('exportFilters').addEventListener('click', exportFilters);
        document.getElementById('importFilters').addEventListener('click', importFilters);

        // 全局快捷键
        document.addEventListener('keydown', (e) => {
            // Ctrl+Shift+F 切换面板
            if(e.ctrlKey && e.shiftKey && e.key === 'F') {
                e.preventDefault();
                togglePanel();
            }
            // Ctrl+Enter 应用过滤
            if(e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                applyFilters();
            }
        });
    }

    // 新增功能函数
    function togglePanel() {
        const panel = document.getElementById('filterPanel');
        const toggleBtn = panel.querySelector('#toggleFilter');
        const isPanelVisible = panel.style.right === '0px';

        panel.style.right = isPanelVisible ? '-300px' : '0';
        toggleBtn.innerHTML = isPanelVisible ? '◀' : '▶';

        // 保存状态
        GM_setValue('panelVisible', !isPanelVisible);
    }

    function saveFilters() {
        const includeKeywords = document.getElementById('includeKeywords').value;
        const excludeKeywords = document.getElementById('excludeKeywords').value;
        GM_setValue('includeKeywords', includeKeywords);
        GM_setValue('excludeKeywords', excludeKeywords);
        alert('过滤规则已保存');
    }

    function resetFilters() {
        if(confirm('确定要重置所有过滤规则吗？')) {
            document.getElementById('includeKeywords').value = '2160p\n4K\nHDR\n';
            document.getElementById('excludeKeywords').value = '国语配音\n合集';
            saveFilters();
            applyFilters();
        }
    }

    function exportFilters() {
        const config = {
            includeKeywords: document.getElementById('includeKeywords').value,
            excludeKeywords: document.getElementById('excludeKeywords').value
        };

        const blob = new Blob([JSON.stringify(config, null, 2)], {type: 'application/json'});
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = 'bt-filter-config.json';
        a.click();

        URL.revokeObjectURL(url);
    }

    function importFilters() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';

        input.onchange = (e) => {
            const file = e.target.files[0];
            const reader = new FileReader();

            reader.onload = (event) => {
                try {
                    const config = JSON.parse(event.target.result);
                    document.getElementById('includeKeywords').value = config.includeKeywords || '';
                    document.getElementById('excludeKeywords').value = config.excludeKeywords || '';
                    saveFilters();
                    applyFilters();
                    alert('配置导入成功');
                } catch(err) {
                    alert('配置文件格式错误');
                }
            };

            reader.readAsText(file);
        };

        input.click();
    }

    // 应用过滤规则
    function applyFilters() {
        const includeKeywords = document.getElementById('includeKeywords').value.split('\n').filter(k => k.trim());
        const excludeKeywords = document.getElementById('excludeKeywords').value.split('\n').filter(k => k.trim());
        let showCount = 0;
        let hideCount = 0;

        // 获取所有搜索结果项
        const items = document.querySelectorAll('li.media.thread');

        items.forEach(item => {
            const title = item.querySelector('.subject a').textContent;

            // 检查是否包含必需关键词
            const hasIncludeKeyword = includeKeywords.length === 0 || includeKeywords.some(keyword => {
                try {
                    const regex = new RegExp(keyword.trim(), 'i');
                    return regex.test(title);
                } catch(e) {
                    return title.toLowerCase().includes(keyword.toLowerCase().trim());
                }
            });

            // 检查是否包含排除关键词
            const hasExcludeKeyword = excludeKeywords.some(keyword => {
                try {
                    const regex = new RegExp(keyword.trim(), 'i');
                    return regex.test(title);
                } catch(e) {
                    return title.toLowerCase().includes(keyword.toLowerCase().trim());
                }
            });

            // 根据规则显示或隐藏
            if(hasIncludeKeyword && !hasExcludeKeyword) {
                item.style.display = '';
                item.classList.remove('filtered-item');
                showCount++;
            } else {
                item.style.display = 'none';
                item.classList.add('filtered-item');
                hideCount++;
            }
        });

        // 更新统计数据
        document.getElementById('showCount').textContent = showCount;
        document.getElementById('hideCount').textContent = hideCount;
    }

    // 自动应用过滤器当页面加载完成
    function initializeFilter() {
        if(document.querySelector('.threadlist')) {
            createFilterPanel();
            setTimeout(applyFilters, 500);

            // 监听分页变化
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.type === 'childList') {
                        applyFilters();
                    }
                });
            });

            observer.observe(document.querySelector('.threadlist'), {
                childList: true,
                subtree: true
            });
        }
    }

    // 页面加载完成后初始化
    if(document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeFilter);
    } else {
        initializeFilter();
    }

})();
